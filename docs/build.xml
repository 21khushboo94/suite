<project name="docs" default="build">

    <import file="../build/common.xml"/>

    <property name="docs.modules" value="usermanual,install,geoexplorer,geowebcache,geoserver,sdk-api,postgis,openlayers,qgis"/>

    <target name="clean" depends="destroy-target"
        description="Clean project">
        <foreach list="${docs.modules}" target="clean-mod" param="mod"/>
    </target>

    <target name="build"
        description="Build all documentation modules">
        <foreach list="${docs.modules}" target="build-mod" param="mod"/>
    </target>

    <target name="clean-mod">
        <ant dir="${mod}" target="clean"/>
    </target>
    <target name="build-mod">
        <ant dir="${mod}"/>
    </target>
    
    <target name="assemble" depends="init"
        description="Assmble documentation artifact">
        <property name="doc.dir" value="target/opengeo-docs"/>
        <delete dir="${doc.dir}"/>
        <mkdir dir="${doc.dir}"/>
        <copy todir="${doc.dir}">
            <fileset dir="usermanual/target/html/${suite.build_profile}" 
                includes="**/*"/>
            <fileset dir="target" includes="version.ini"/>
        </copy>

        <for list="${docs.modules}" param="mod">
            <sequential>
                <if>
                    <and>
                        <not>
                            <equals arg1="@{mod}" arg2="install"/>
                        </not>
                        <not>
                            <equals arg1="@{mod}" arg2="usermanual"/>
                        </not>
                    </and>
                    <then>
                        <copy todir="${doc.dir}/@{mod}">
                            <fileset dir="@{mod}/target/html" includes="**/*"/>
                        </copy>
                    </then>
                </if>
            </sequential>
        </for>

        <antcall target="assemble-artifact">
            <param name="dir" value="target"/>
            <param name="includes" value="opengeo-docs/**/*"/>
        </antcall>

        <if>
            <equals arg1="${pdflatex.isPresent}" arg2="true"/>
            <then>
              <sequential>
               <antcall target="assemble-artifact">
                    <param name="name" value="pdfdoc"/>
                    <param name="dir" value="usermanual/target/latex/${suite.build_profile}"/>
                    <param name="includes" value="*.pdf"/>
                </antcall>
                <antcall target="assemble-artifact">
                    <param name="name" value="osx-readme"/>
                    <param name="dir" value="install/mac/target/latex/"/>
                    <param name="includes" value="README*.pdf"/>
                </antcall>
                <antcall target="assemble-artifact">
                    <param name="name" value="win-readme"/>
                    <param name="dir" value="install/windows/target/latex/"/>
                    <param name="includes" value="README*.pdf"/>
                </antcall>
              </sequential>
            </then>
            <else>
                <echo message="Skipping pdf assembly."/>
            </else>
        </if>
    </target>

    <target name="publish" depends="init">
        <antcall target="publish-artifact"/>
        <if>
          <equals arg1="${pdflatex.isPresent}" arg2="true"/>
          <then>
            <sequential>
              <antcall target="publish-artifact">
                  <param name="name" value="pdfdoc"/>
                  <param name="path" value="docs"/>
              </antcall>
              <antcall target="publish-artifact">
                  <param name="name" value="osx-readme"/>
                  <param name="path" value="docs"/>
              </antcall>
              <antcall target="publish-artifact">
                  <param name="name" value="win-readme"/>
                  <param name="path" value="docs"/>
              </antcall>
            </sequential>
          </then>
        </if>
    </target>

</project>
