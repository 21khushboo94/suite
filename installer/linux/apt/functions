SVN_REPO=http://svn.opengeo.org/suite
BUILDS=http://suite.opengeo.org/builds
REPO_PATH=trunk
BRANCH=trunk
REV=latest

# checkrc <code> <message>
function checkrc() {
  if [ "$1" != 0 ]; then
    echo "$2 failed returning $1"
    exit 1
  fi
}

# get_file <url> [overwrite]
function get_file() {
  local url=$1
  local file=`echo $url | sed 's#http://##g' | xargs basename`

  if [ ! -d files ]; then
     mkdir files
     checkrc $? "mkdir files"
  fi

  if [ "$2" != "" ] ||  [ ! -e files/$file ]; then
     wget $url
     checkrc $? "downloading $url"

     mv $file files
     checkrc $? "mv $file files"
  fi
}

# get_svn <repo_path> <dir> <path>
function get_svn() {
  local repo_path=$1
  local dir=$2
  local path=$3

  if [ ! -d svn ]; then
    mkdir svn
    checkrc $? "mkdir svn"
  fi

  if [ ! -d svn/$repo_path ]; then
    mkdir svn/$repo_path
    checkrc $? "mkdir svn/$repo_path"
  fi

  pushd svn/$repo_path
  if [ -d $dir ]; then 
    svn up $dir
  else 
    svn co $SVN_REPO/$repo_path/$path $dir
  fi
  checkrc $? "svn update"
  popd
}

# build_deb <name>
function build_deb() {

  local build="build/$1"

  # clear out old build
  rm -rf $build
  mkdir -p $build

  pushd $1
  checkrc $? "pushd $1"
  debuild clean

  # debuild
  debuild -uc -us -b -i
  checkrc $? "debuilding $1"
  
  # move artifacts to build directory
  popd
  mv *.deb *.build *.changes $build
}

# check_root
check_root() {
  if [ "$USER" != "root" ]; then
    echo "This script must be run as root"
    exit 1
  fi
}

# remove_deb [package, ...]
remove_deb() {
  local pkgs=( $* )

  # remove
  for (( i = 0; i < ${#pkgs[@]}; i++ )); do
    dpkg -r ${pkgs[$i]}
  done

  # prune
  for (( i = 0; i < ${#pkgs[@]}; i++ )); do
    dpkg -P ${pkgs[$i]}
  done
}

# install_deb <name> [package, ...]
install_deb() {
  local name=$1
  local pkgs=( $* )

  pushd build/$name
  for (( i = 1; i < ${#pkgs[@]}; i++ )); do
    dpkg -i ${pkgs[$i]}_*
  done
  popd

  dpkg -l | grep $name
}

# publish_deb <name> <repo> <dist>
publish_deb() {
  local name=$1
  local repo=$2
  local dist=$3

  pushd build/$name
  checkrc $? "push build/$name"

  scp * apt.opengeo.org:/home/apt/incoming/$repo/$dist
  checkrc $? "secure copy .deb files"
  ssh -i ~/.ssh/id_rsa_apt apt@apt.opengeo.org "./publish_debs.sh $repo $dist" 
  checkrc $? "remote publish"

  popd
}
